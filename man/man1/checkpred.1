.TH "checkpred" "1" "2020.9.28" "September 2020" "checkpred 7.2"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SS "Name"
checkpred - utility to create and verify logical formulas for determining whether a
given inequality is redundant after eliminating variables, without eliminating the variables.
.SS "Synopsis"
.HP \w'\fBcheckpred\fR\ [input-file]\ 'u
\fBcheckpred\fR\ \fI[input-file]\fR
.SS "Description"
.PP

The input file is a list of inequalities defining a polyhedron P in \fIlrs\fR format
along with a list of variables for
a projection of P
and an inequality I to test. The question is whether we have the 
same projection when I is deleted from P. 
If so we say I is redundant for the projection, otherwise it is non-redundant. 
\fIcheckpred\fR
is a utility for determining this
without performing the projection.  
It produces logical formulas in \fISMT\-LIB\fR
2.6 format that are satisfiable iff the I is non-redundant for the projection.
In addition, \fIcheckpred\fR can produce \fIlrs\fR inputs that verify witnesses of
non-redundancy produced by an SMT solver.

.SS "File formats"
.PP
The input file is in \fIlrs\fR format (see 
.BR lrs (1) )
consisting of
(a) an H-representation of
a polyhedron, (b) a projection to a subset of variables given by the \fIproject\fR or \fIeliminate\fR
options, and (c) an inequality to test given by the \fIredund\fR or \fIredund_list\fR options.
Note that only "linearity", "redund", "redund_list", "project"
and "eliminate" options are supported, and the combination of
redund/redund_list and project/eliminate options is both unique to
checkpred and required.

.PP
The output
is in \fISMT\-LIB\fR 2.6 format using logic \fILRA\fR.  Solvers such as
\fIz3\fR or \fIcvc4\fR support this logic.  See The SMT-LIB Standard: Version 2.6
for details.

.SS "Options"
.PP

\fBcheckpred\fR\ [input-file]
produces a logical formula satisfiable iff the first inequality
given in a redund/redund_list option is redundant after projection according to
a project/eliminate option.
The solver can produce witnesses for non-redundant inequalities, i.e.
an assignment to the variables whose image is in the projection only if
the inequality is removed.  No witness is produced if the inequality
is redundant.
.PP
A witness of non-redundancy can be verified using two
certificates.  The first certificate specifies that the assignment to
the variables is feasible when the inequality in question is removed.
The second certificate asserts that when this inequality is added,
no feasible assignment has the same projection.  Certificates are produced
using the following options.
.PP
\fBcheckpred\fR\ -c 1 [input-file]
reads a witness of non-redundancy on standard input and produces an lrs input
file that should be feasible.  The options in the input file should be the
same as when the formula was produced.

.PP
\fBcheckpred\fR\ -c 2 [input-file]
reads a witness of non-redundancy on standard input and produces an lrs input
file that should be infeasible.  The options in the input file should be
the same as when the formula was produced.

.SS "Examples"
.PP
(1) Check if the first inequality in cp4.ine is redundant for projections.
.br
(a) To check for redunancy after the first variable is eliminated,
add options "redund_list 1 1" and "eliminate 1 1" to cp4.ine. Then:

 % checkpred cp4.ine > cp4\-11.smt
 % z3 cp4\-11.smt > cp4\-11.out    
.br
or
.br
 % cvc4 -L smt --produce-models cp4\-11.smt > cp4\-11.out 

The first line of cp4\-11.out reads "sat" indicating that
inequality 1 is non-redundant for eliminating variable 1. We
can check the witness:

 % checkpred -c 1 cp4.ine < cp4\-11.out | lrs
 % checkpred -c 2 cp4.ine < cp4\-11.out | lrs

The first certificate is feasible and second infeasible, so
the witness proves non-redundancy for the projection.
.br
(b) To check for redunancy after variables 1 and 2 are eliminated,
add options "redund_list 1 1" and "eliminate 2 1 2" to cp4.ine. Then

 % checkpred cp4.ine > cp4\-112.smt
 % z3 cp4\-112.smt > cp4\-112.out
.br
or
.br
 % cvc4 -L smt --produce-models cp4\-112.smt > cp4\-112.out

The first line of cp4\-112.out reads "unsat" indicating that
inequality 1 is redundant for eliminating variables 1 and 2.
In this case there is no witness.

.SS "Notes"
.IP " 1." 4
SMT-Lib Standards
.RS 4
\%http://smtlib.cs.uiowa.edu/language.shtml
.RE
.IP " 2." 4
z3
.RS 4
\%https://github.com/Z3Prover/z3/wiki
.RE
.IP " 3." 4
cvc4
.RS 4
\%https://cvc4.github.io/
.RE
.SS Author
Charles Jordan <skip at res dot otaru-uc dot ac dot jp >
.SS "See also"
.BR lrslib (5),
.BR lrs (1)
