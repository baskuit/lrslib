.TH "lrslib" "5" "2022.01.19" "January 2022" "lrslib 7.2"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SS "Name"
lrslib: Convert between representations of convex polyhedra, remove redundant inequalities, 
convex hull computation, solve linear programs in exact precision, 
compute Nash-equibria in 2-person games\&.
.SS "Synopsis"
.HP \w'\fBlrs\fR\ [input-file] [output-file]\ 'u
\fBlrs\fR\ \fI[input-file] [output-file]\fR
.HP \w'\fBredund\fR\ [input-file] [output-file]\ 'u
\fBredund\fR\ \fI[input-file] [output-file]\fR
.HP \w'\fBfel\fR\    [input-file] [output-file]\ 'u
\fBfel\fR\ \fI[input-file] [output-file]\fR
.HP \w'\fBmpirun\fR -np \fInum_proc\fR \fBmplrs\fR\ \fIinput-file [output-file] [options...]\fR\ 'u
\fBmpirun\fR -np \fInum-proc\fR \fBmplrs\fR\ \fIinput-file [output-file] [options]\fR
.HP \w'\fBlrsnash\fR\ [input-file] \ 'u
\fBlrsnash\fR\ \fI[options] [input-file] \fR 
.HP \w'\fBhvref/xref\fR\ [input-file] \ 'u
\fBhvref/xvref\fR\ \fI[input-file]\fR 
.HP \w'\fBhvref/xref\fR\ [input-file] \ 'u
\fBcheckpred\fR\ \fI[input-file]\fR 
.SS "Description"

.LP
A polyhedron can be described by a list of inequalities (\fIH\-representation)\fR
or as by a list of its vertices and extreme rays (\fIV\-representation)\fR\&.
\fIlrslib\fR is a C library containing programs to manipulate these representations.
All computations are done in exact arithmetic.
.PP
lrs(1)
converts an H\-representation of a polyhedron to its V\-representation and vice versa,
known respectively as the
\fIvertex enumeration\fR
and
\fIfacet enumeration\fR problems\& (see Example (1) below).
lrs can also be used to solve a linear program, remove linearities from a system,
and extract a subset of columns.
.PP
redund(1)
removes redundant inequalities in an input H-representation and outputs the remaining inequalities\&.
For a V-representation input it
outputs all extreme points and extreme rays. Both outputs can be piped directly into \fIlrs\fR.
\fIredund\fR is a link to \fIlrs\fR which performs these functions via
the \fBredund\fR and \fBredund_list\fR options.
.PP
fel(1)
projects an input H-representation onto a given set of variables using Fourier-Motzkin elimination.
For a V-representation it extracts the specified columns.
The output is non-redundant and can be 
can be piped directly into \fIlrs\fR.
\fIfel\fR is a link to \fIlrs\fR which performs these functions via 
the \fBeliminate\fR and \fBproject\fR options.
.PP
mplrs(1)
is Skip Jordan's parallel wrapper for \fIlrs/redund/fel\fR. 
.PP
lrsnash(1)
is Terje Lensberg's application of \fIlrs\fR for finding Nash-equilibria
in 2-person games\&. 
.PP
hvref(1) xvref(1) produce a cross reference list between H- and V-representations.
.RE
.PP
checkpred(1) is Skip Jordan's utility to create and verify logical formulas for determining whether a given inequality is redundant after eliminating variables, without eliminating the variables.  
.RE

.SS "Arithmetic" 
lrsarith(5) From version 7.1 \fIlrs/redund/mplrs\fR use hybrid arithmetic with overflow checking, 
starting in 64bit integers, moving to 128bit (if available) and then GMP.
Overflow checking is conservative to improve performance:
eg. with 64 bit arithmetic, a*b triggers overflow if either a or b is at least 2^31, 
and a+b triggers an overflow if either a or b is at least 2^62.
Typically problems that can be solved in 64bits run 3-4 times faster than with GMP 
and inputs solvable in 128bits run twice as fast as GMP.
.PP
Various arithmetic versions are available 
and can be built from the makefile.

.SS "Notes"
.PP 
User's guide for lrslib
.RS 4
\%http://cgm.cs.mcgill.ca/~avis/C/lrslib/USERGUIDE.html
.RE
.SS Author
David Avis <avis at cs dot mcgill dot ca >
.SS "See Also"
lrs (1), mplrs(1), fel(1), lrsnash(1), hvref(1), xvref(1), checkpred(1), lrsarith(5)

